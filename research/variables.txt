Welcome to variables.txt, where you can adjust the constants and presets used
in Cayley. You can edit anything, so long as it is not to the right of an '='
sign. Certain variables, however, need to stay in certain formats. Examples are
marked with a # that should not be removed. Except for with dictionary type
variables, variable entries should be restricted to one line.

All variables may be called with the variable() command, which takes four
arguments. Only two, the string form of the key (the sequence of characters
before the '=') and the type of the variable, are required. The others have
default values.

Options for the second argument are: int, float, str, list, and dict. These correspond to
Python object types, and each has its own formatting requirements within this
document.

As the name implies, ints are integers. Thus, you should use only the digits
0-9 when defining them. You can use a decimal, but it will be rounded.

Floats are decimals. You may use the 0-9 and the point '.' to define them.
Not including a decimal point is also acceptable.

Strings are strings of characters. Any string characters may be included in a
string, although most variables will only take in certain strings.

Lists are sequences of either ints, floats, or strings, or other lists.
In the former cases, values should be separated by spaces ' '. In the latter,
internal lists are set off by parentheses and commas, with no spaces in between
lists. The type of a list entry may be specified with the third argument of
the variable() function as either int, float, or str (the default). If int or
float is specified, stick to the characters described above.

Dictionaries contain keys and entries, where each entry corresponds to a key.
Dictionaries may take up multiple lines. The first line contains a '{', while
the last ends with a '}'. A key is specified, usually of the int type, then a
colon ':' separates the entry from the key.

'Timesteps' describes the number of discrete timesteps for which a single Monte
Carlo simulation runs. It is the integer type. It may be retrieved with:
variable('timesteps', int)
timesteps = 50

'Node list' specifies the individual nodes to be compared for correlation in
a Cayley Tree or Lattice network. It is a nested list with integers, and may be
caylled with:
variable('node_list', list, int)
node_list = (0 1),(1 2),(2 3),(21 106)

'Initial State' specifies the initial state of a Cayley Tree or lattice. It may
be empty, random, or zero, where zero corresponds to a Cayley Tree with only the
center node filled. It is a string, and may be called with:
variable('initial_state',str)
initial_state = empty

The lists below are ranges of parameters for certain volume module functions.
The first six are for Cayley Tree networks, while the last five are for the game
theory simulations. All should take floats as arguments. They may be called with:
variable('alpha_list', list, float) or similar
alpha_list = 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0
beta_list = 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0
gamma_list = 0 0.05 0.1 0.15 0.2
mu_list = 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0
r1_list = 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0
r2_list = 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0

a_list = 0 1 2 3 4 5 6 7 8 9 10
b_list = 0 1 2 3 4 5 6 7 8 9 10
c_list = 0 1 2 3 4 5 6 7 8 9 10
d_list = 0 1 2 3 4 5 6 7 8 9 10
issue_list = 0.4 0.6

'Temperature dictionary' is a dictionary of temperatures. The keys correspond
to generations in a Cayley Tree or nodes in a lattice, and should be ints. The
entries designate the temperatures, and should be floats. Don't worry if you
have a large network, temp_d will iterate over the entire network, repeating
until all nodes or generations have been assigned temperatures. It is a dict,
and may be called with:
variable('temp_d', dict, float)
temp_d = {0: 0.01
          1: 0.02
          }

Like node_list, 'Senate Correlation List' is a nested list with string entries
that correspond to the last names of senators for comparison. It may be called
with:
variable('senate_corr',list,str)
senate_corr = (Franken Sanders),(Sanders Merkley)

'Radius of Connection' is used to determine the radius within which senators
in the limited model are linked to each other. It should be a float, no larger
than one. If it is too small, an error will be returned. It may be called with:
variable('radius_of_connection', float)
radius_of_connection = 0.07
